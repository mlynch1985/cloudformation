AWSTemplateFormatVersion: '2010-09-09'

Description: CRS Jenkins Network and ECS Infrastructure for CICD Accounts

Parameters:
  PublicAccessCidr:
    Type: String
    Default: 0.0.0.0/0
  EcsCpu:
    Type: Number
    MinValue: 256
    MaxValue: 4096
    Default: 2048
  EcsMemory:
    Type: Number
    MinValue: 512
    MaxValue: 30720
    Default: 4096
  JenkinsDockerImage:
    Type: String
    Default: jenkins/jenkins:lts

Resources:
  SecurityGroupPublicAlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: jenkins_public_alb
      GroupDescription: !Sub 'Grants HTTP(s) access to the Public ALB from ${PublicAccessCidr}'
      VpcId: !ImportValue 'jenkins-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PublicAccessCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicAccessCidr
      SecurityGroupEgress:
        - Description: Grants default outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: jenkins_public_alb

  SecurityGroupJenkinsMaster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: jenkins_master
      GroupDescription: Grants HTTP:8080 access to the Jenkins Master container
      VpcId: !ImportValue 'jenkins-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !ImportValue 'jenkins-vpc-cidr'
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 50000
          SourceSecurityGroupId: !Ref SecurityGroupJenkinsAgent
      SecurityGroupEgress:
        - Description: Grants default outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: jenkins_master

  SecurityGroupJenkinsAgent:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: jenkins_agent
      GroupDescription: Grants only outbound access from our Jenkins Agent nodes
      VpcId: !ImportValue 'jenkins-vpc-id'
      SecurityGroupEgress:
        - Description: Grants default outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: jenkins_agent

  SecurityGroupEFSShare:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: jenkins_efs_share
      GroupDescription: Grants inbound NFS:2049 access from Jenkins Master
      VpcId: !ImportValue 'jenkins-vpc-id'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref SecurityGroupJenkinsMaster
      SecurityGroupEgress:
        - Description: Grants default outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: jenkins_efs_share

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: jenkins-public-alb
      Type: application
      Scheme: internet-facing
      SecurityGroups: [!Ref SecurityGroupPublicAlb]
      Subnets:
        - !ImportValue 'jenkins-subnet-public-a'
        - !ImportValue 'jenkins-subnet-public-b'
        - !ImportValue 'jenkins-subnet-public-c'
      Tags:
        - Key: Name
          Value: jenkins_public_alb

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: jenkins-private-nlb
      Type: network
      Scheme: internal
      Subnets:
        - !ImportValue 'jenkins-subnet-private-a'
        - !ImportValue 'jenkins-subnet-private-b'
        - !ImportValue 'jenkins-subnet-private-c'
      Tags:
        - Key: Name
          Value: jenkins_private_nlb

  TargetGroupAlb:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /login
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Name: jenkins-master-8080
      VpcId: !ImportValue 'jenkins-vpc-id'
      TargetType: ip
      Protocol: HTTP
      Port: 8080
      Tags:
        - Key: Name
          Value: jenkins_master_8080

  TargetGroupNlb:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 8080
      Name: jenkins-master-50000
      VpcId: !ImportValue 'jenkins-vpc-id'
      TargetType: ip
      Protocol: TCP
      Port: 50000
      Tags:
        - Key: Name
          Value: jenkins_master_50000

  ListenerAlbHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupAlb

  ListenerNlbTcp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: TCP
      Port: 50000
      LoadBalancerArn: !Ref NetworkLoadBalancer
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupNlb

  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: jenkins_master_home

  EfsMountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !ImportValue 'jenkins-subnet-private-a'
      SecurityGroups: [!Ref SecurityGroupEFSShare]

  EfsMountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !ImportValue 'jenkins-subnet-private-b'
      SecurityGroups: [!Ref SecurityGroupEFSShare]

  EfsMountTargetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !ImportValue 'jenkins-subnet-private-c'
      SecurityGroups: [!Ref SecurityGroupEFSShare]

  EfsAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EfsFileSystem
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '755'
        Path: '/jenkins-home'

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /jenkins/master
      RetentionInDays: 30

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: jenkins_master_cluster
      Tags:
        - Key: Name
          Value: jenkins_master_cluster

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: jenkins_master_cluster
      Cpu: !Ref EcsCpu
      Memory: !Ref EcsMemory
      ExecutionRoleArn: !ImportValue 'jenkins-ecs-iam-arn'
      TaskRoleArn: !ImportValue 'jenkins-ecs-iam-arn'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
        - EC2
      ContainerDefinitions:
        - Name: jenkins_master
          Image: !Ref JenkinsDockerImage
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 50000
          MountPoints:
            - ContainerPath: /var/jenkins_home
              SourceVolume: jenkins_home
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: jenkins
          Environment:
            - Name: AGENT_EXECUTION_ROLE_ARN
              Value: !ImportValue 'jenkins-ecs-iam-arn'
            - Name: AGENT_SECURITY_GROUP_ID
              Value: !Ref SecurityGroupJenkinsAgent
            - Name: AWS_ACCOUNTID
              Value: !Ref AWS::AccountId
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ECS_AGENT_CLUSTER
              Value: jenkins_master_cluster
            - Name: JENKINS_URL
              Value: !Join ['', ['http://', !GetAtt ApplicationLoadBalancer.DNSName, '/']]
            - Name: PRIVATE_JENKINS_HOST_AND_PORT
              Value: 'http://master.jenkins.local:50000'
            - Name: SUBNET_IDS
              Value:
                !Join [
                  '',
                  [!ImportValue 'jenkins-subnet-private-a', ',', !ImportValue 'jenkins-subnet-private-b', ',', !ImportValue 'jenkins-subnet-private-c'],
                ]
            - Name: JENKINS_USERNAME
              Value: crsadmin
            - Name: JENKINS_AGENT_PORT
              Value: 50000
          Secrets:
            - Name: JENKINS_PASSWORD
              ValueFrom: !Ref SecretJenkinsCredentials
      Volumes:
        - Name: jenkins_home
          EFSVolumeConfiguration:
            FilesystemId: !Ref EfsFileSystem
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref EfsAccessPoint
              IAM: ENABLED

  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerAlbHttp
      - ListenerNlbTcp
    Properties:
      ServiceName: jenkins_master
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: jenkins_master
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupAlb
        - ContainerName: jenkins_master
          ContainerPort: 50000
          TargetGroupArn: !Ref TargetGroupNlb
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [!GetAtt SecurityGroupJenkinsMaster.GroupId]
          Subnets:
            - !ImportValue 'jenkins-subnet-private-a'
            - !ImportValue 'jenkins-subnet-private-b'
            - !ImportValue 'jenkins-subnet-private-c'
      TaskDefinition: !Ref EcsTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          Port: 50000

  JenkinsAgentRepo:
    Type: AWS::ECR::Repository
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: True
      ImageTagMutability: IMMUTABLE
      RepositoryName: 'jenkins_agent'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:ListImages'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'

  SecretJenkinsCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'jenkins_admin_credentials'
      Description: 'Default Admin credentials for new Jenkins install'
      GenerateSecretString:
        SecretStringTemplate: '{"username":"crsadmin"}'
        GenerateStringKey: 'password'
      Tags:
        - Key: Name
          Value: jenkins_admin_credentials

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: jenkins.local
      Vpc: !ImportValue 'jenkins-vpc-id'

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: master
      NamespaceId: !Ref PrivateNamespace
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV

Outputs:
  JenkinsUrl:
    Value: !Join ['', ['http://', !GetAtt ApplicationLoadBalancer.DNSName]]
