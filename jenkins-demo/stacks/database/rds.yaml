# This template currently assumes deployment into the us-east-1 region. Update AMI IDs to target a different region.
#
# Please subscribe to the Firewall Product on the AWS Marketplace and obtain latest AMI ID before deploying.
#
# Enable Appliance Mode on the DMZ Transit Gateway Attachment
# https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-appliance-scenario.html#transit-gateway-appliance-support
#
AWSTemplateFormatVersion: '2010-09-09'

Description: This template will deploy a PoatgreSQL Aurora RDS Cluster

Parameters:
  Namespace:
    Type: String
    Default: sample
    Description: Specify a custom namespace to identify and group resources
  RdsInstanceSize:
    Type: String
    Default: db.r5.large
    Description: Specify a supporte instance size for your RDS engine

Resources:
  SecurityGroupPrivatePostgres:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Namespace}-private-postgres'
      GroupDescription: Grants access from the local VPC to RDS Postgres
      VpcId:
        Fn::ImportValue: !Sub '${Namespace}-vpc-id'
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub '${Namespace}-vpc-cidr'
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
          IpProtocol: -1
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-private-http'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  DbClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub '${Namespace} Cluster Parameter Group'
      Family: aurora-postgresql13
      Parameters:
        rds.force_ssl: 1
      Tags:
        - Key: Name
          Value: !Sub '${Namespace}-rds-cluster-parameters'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  DbParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub '${Namespace} Aurora Parameter Group'
      Family: aurora-postgresql13
      Parameters:
        log_statement: ddl
      Tags:
        - Key: Name
          Value: !Sub '${Namespace}-rds-db-parameters'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${Namespace}-rds-subnetgroup'
      DBSubnetGroupDescription: !Sub '${Namespace} RDS Subnet Group'
      SubnetIds:
        - Fn::ImportValue: !Sub '${Namespace}-subnet-private-a-id'
        - Fn::ImportValue: !Sub '${Namespace}-subnet-private-b-id'
        - Fn::ImportValue: !Sub '${Namespace}-subnet-private-c-id'
      Tags:
        - Key: Name
          Value: !Sub '${Namespace}-rds-subnetgroup'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  AuroraPostgresSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Namespace}-rds-creds'
      Description: Database credentials for Postgres on RDS for Debt Manager
      GenerateSecretString:
        ExcludePunctuation: true
        PasswordLength: 16
        SecretStringTemplate: '{"username":"testadmin"}'
        GenerateStringKey: 'password'
      Tags:
        - Key: Name
          Value: !Sub '${Namespace}-rds-creds'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SecretTargetAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraPostgresSecret
      TargetId: !Ref RdsCluster
      TargetType: AWS::RDS::DBCluster

  RdsCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Sub '${Namespace}-rds-cluster'
      DBClusterParameterGroupName: !Ref DbClusterParameterGroup
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: aurora-postgresql
      EngineVersion: '13.4'
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraPostgresSecret, ':SecretString:username}}']]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraPostgresSecret, ':SecretString:password}}']]
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !GetAtt SecurityGroupPrivatePostgres.GroupId
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-rds-cluster'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  RdsDbInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${Namespace}-rds-instance1'
      DBClusterIdentifier: !Ref RdsCluster
      DBInstanceClass: !Ref RdsInstanceSize
      DBParameterGroupName: !Ref DbParameterGroup
      Engine: aurora-postgresql
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub '${Namespace}-rds-instance1'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  RdsDbInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${Namespace}-rds-instance2'
      DBClusterIdentifier: !Ref RdsCluster
      DBInstanceClass: !Ref RdsInstanceSize
      DBParameterGroupName: !Ref DbParameterGroup
      Engine: aurora-postgresql
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub '${Namespace}-rds-instance2'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

Outputs:
  RdsPort:
    Value: !GetAtt RdsCluster.Endpoint.Port
    Export:
      Name: !Sub '${Namespace}-rds-port'
  RdsEndpointWrite:
    Value: !GetAtt RdsCluster.Endpoint.Address
    Export:
      Name: !Sub '${Namespace}-rds-write'
  RdsEndpointRead:
    Value: !GetAtt RdsCluster.ReadEndpoint.Address
    Export:
      Name: !Sub '${Namespace}-rds-read'
