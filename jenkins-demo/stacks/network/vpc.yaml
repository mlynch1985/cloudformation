# This template currently assumes deployment into the us-east-1 region. Update AMI IDs to target a different region.
#
# Please subscribe to the Firewall Product on the AWS Marketplace and obtain latest AMI ID before deploying.
#
# Enable Appliance Mode on the DMZ Transit Gateway Attachment
# https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-appliance-scenario.html#transit-gateway-appliance-support
#
AWSTemplateFormatVersion: '2010-09-09'

Description: This template will deploy a 10.0.0.0/21 VPC, 3 public and 3 public subnets

Parameters:
  Namespace:
    Type: String
    Default: sample
    Description: Specify a custom namespace to identify and group resources
  VpcCidr:
    Type: String
    Default: 10.0.0.0/20
    Description: Specify a valid IP CIDR between /16 and /24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/([1][6-9]|[2][0-4])"
    ConstraintDescription: Must be a valid IP cidr range between /16 and /21 and in the 0.0.0.0/0 format
  SubnetBitsSize:
    Type: Number
    Description: Subnet CIDR bits must be at least 4 bits smaller than VPC CIDR. Subtract desired subnet cidr from 32 to get Bits Size (eg. /32 - /24 = 8)
    Default: 8
    MinValue: 4
    MaxValue: 12

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-vpc'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!GetAtt Vpc.CidrBlock, 8, !Ref SubnetBitsSize]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-public-a'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!GetAtt Vpc.CidrBlock, 8, !Ref SubnetBitsSize]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-public-b'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetPublicC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!GetAtt Vpc.CidrBlock, 8, !Ref SubnetBitsSize]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-public-c'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!GetAtt Vpc.CidrBlock, 8, !Ref SubnetBitsSize]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-private-a'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [4, !Cidr [!GetAtt Vpc.CidrBlock, 8, !Ref SubnetBitsSize]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-private-b'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [5, !Cidr [!GetAtt Vpc.CidrBlock, 8, !Ref SubnetBitsSize]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-private-c'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  SubnetRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-public'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetRoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SubnetRouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref SubnetRouteTablePublic

  SubnetRouteTableAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref SubnetRouteTablePublic

  SubnetRouteTableAssociationPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicC
      RouteTableId: !Ref SubnetRouteTablePublic

  NatEipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-a'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  NatEipB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-b'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  NatEipC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-c'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipA.AllocationId
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-a'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipB.AllocationId
      SubnetId: !Ref SubnetPublicB
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-b'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  NATGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipC.AllocationId
      SubnetId: !Ref SubnetPublicC
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-c'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetRouteTablePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-private-a'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetRouteTablePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-private-b'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetRouteTablePrivateC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${Namespace}-private-c'
        - Key: 'Namespace'
          Value: !Sub '${Namespace}'

  SubnetRoutePrivateA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SubnetRouteTablePrivateA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  SubnetRoutePrivateB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SubnetRouteTablePrivateB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  SubnetRoutePrivateC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SubnetRouteTablePrivateC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayC

  SubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      RouteTableId: !Ref SubnetRouteTablePrivateA

  SubnetRouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB
      RouteTableId: !Ref SubnetRouteTablePrivateB

  SubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateC
      RouteTableId: !Ref SubnetRouteTablePrivateC

Outputs:
  VpcId:
    Value: !Ref Vpc
    Export:
      Name: !Sub '${Namespace}-vpc-id'
  VpcCidr:
    Value: !GetAtt Vpc.CidrBlock
    Export:
      Name: !Sub '${Namespace}-vpc-cidr'
  VpcDefaultSecurityGroup:
    Value: !GetAtt Vpc.DefaultSecurityGroup
    Export:
      Name: !Sub '${Namespace}-vpc-default-sg'

  SubnetPublicIdA:
    Value: !Ref SubnetPublicA
    Export:
      Name: !Sub '${Namespace}-subnet-public-a-id'
  SubnetPublicIdB:
    Value: !Ref SubnetPublicB
    Export:
      Name: !Sub '${Namespace}-subnet-public-b-id'
  SubnetPublicIdC:
    Value: !Ref SubnetPublicC
    Export:
      Name: !Sub '${Namespace}-subnet-public-c-id'

  SubnetPrivateIdA:
    Value: !Ref SubnetPrivateA
    Export:
      Name: !Sub '${Namespace}-subnet-private-a-id'
  SubnetPrivateIdB:
    Value: !Ref SubnetPrivateB
    Export:
      Name: !Sub '${Namespace}-subnet-private-b-id'
  SubnetPrivateIdC:
    Value: !Ref SubnetPrivateC
    Export:
      Name: !Sub '${Namespace}-subnet-private-c-id'

  SubnetPublicAzA:
    Value: !Ref SubnetPublicA
    Export:
      Name: !Sub '${Namespace}-subnet-public-a-az'
  SubnetPublicAzB:
    Value: !Ref SubnetPublicB
    Export:
      Name: !Sub '${Namespace}-subnet-public-b-az'
  SubnetPublicAzC:
    Value: !Ref SubnetPublicC
    Export:
      Name: !Sub '${Namespace}-subnet-public-c-az'

  SubnetPrivateAzA:
    Value: !Ref SubnetPrivateA
    Export:
      Name: !Sub '${Namespace}-subnet-private-a-az'
  SubnetPrivateAzB:
    Value: !Ref SubnetPrivateB
    Export:
      Name: !Sub '${Namespace}-subnet-private-b-az'
  SubnetPrivateAzC:
    Value: !Ref SubnetPrivateC
    Export:
      Name: !Sub '${Namespace}-subnet-private-c-az'
