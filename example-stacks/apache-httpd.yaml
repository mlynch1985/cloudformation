AWSTemplateFormatVersion: '2010-09-09'

Description: This template will deploy a sample Linux HTTPD site hosted in an AutoScaling Group.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - PublicSubnets
          - PrivateSubnets
          - SourceCidr
      - Label:
          default: Linux ASG Configuration
        Parameters:
          - AmiId
          - InstanceType
          - AsgDesired
          - AsgMin
          - AsgMax

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC ID where we should deploy this stack
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the Public facing Subnets for the ELB
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the Private facing Subnets for the Linux ASG
  SourceCidr:
    Type: String
    Description: Provide a CIDR to allow source traffic to the ELB
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: 172.31.0.0/16
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Provide the SSM Parameter path to a valid AMI ID
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Type: String
    Description: Select the EC2 Instance Size for the Linux ASG Instances
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
  AsgDesired:
    Type: Number
    Description: Specify the number of instances to launch by default
    MinValue: 1
    MaxValue: 10
    Default: 3
  AsgMin:
    Type: Number
    Description: Specify the minimum number of instances to launch
    MinValue: 1
    MaxValue: 10
    Default: 1
  AsgMax:
    Type: Number
    Description: Specify the maximum number of instances to launch
    MinValue: 1
    MaxValue: 10
    Default: 6

Mappings:
  RegionMap:
    us-east-1:
      ElbAccountId: 127311923021
    us-east-2:
      ElbAccountId: 033677994240
    us-west-1:
      ElbAccountId: 027434742980
    us-west-2:
      ElbAccountId: 797873946194
    af-south-1:
      ElbAccountId: 098369216593
    ca-central-1:
      ElbAccountId: 985666609251
    eu-central-1:
      ElbAccountId: 054676820928
    eu-west-1:
      ElbAccountId: 156460612806
    eu-west-2:
      ElbAccountId: 652711504416
    eu-south-1:
      ElbAccountId: 635631232127
    eu-west-3:
      ElbAccountId: 009996457667
    eu-north-1:
      ElbAccountId: 897822967062
    ap-east-1:
      ElbAccountId: 754344448648
    ap-northeast-1:
      ElbAccountId: 582318560864
    ap-northeast-2:
      ElbAccountId: 600734575887
    ap-northeast-3:
      ElbAccountId: 383597477331
    ap-southeast-1:
      ElbAccountId: 114774131450
    ap-southeast-2:
      ElbAccountId: 783225319266
    ap-southeast-3:
      ElbAccountId: 589379963580
    ap-south-1:
      ElbAccountId: 718504428378
    me-south-1:
      ElbAccountId: 076674570225
    sa-east-1:
      ElbAccountId: 507241528517

Resources:
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This role will grant EC2 access to communicate with Systems Manager and CloudWatch
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref IamRole
      Roles:
        - !Ref IamRole

  S3Bucket:
    #checkov:skip=CKV_AWS_18:Access Logging is intentionally not setup for demo purposes
    #checkov:skip=CKV_AWS_21:This is a logging bucket and therefore we do not need Versioning enabled
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: We are opting to not activate access logging for demo purposes
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256 # aws:kms is not currently support as of 2022.07.01
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOlderThan30Days
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AccessLogs'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: GrantPutObject
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub '${S3Bucket.Arn}/*'
            Principal:
              AWS: !Sub
                - 'arn:${AWS::Partition}:iam::${CurrentELBAccountId}:root'
                - CurrentELBAccountId: !FindInMap [RegionMap, !Ref AWS::Region, ElbAccountId]
          - Sid: GrantGetBucketAcl
            Effect: Allow
            Action:
              - s3:GetBucketAcl
            Resource:
              - !GetAtt S3Bucket.Arn
            Principal:
              Service: !Sub 'logdelivery.elb.${AWS::URLSuffix}'
            Condition:
              ArnLike:
                aws:SourceAccount: !Ref AWS::AccountId

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Enabling outbound to all destinations for demo purposes
    Properties:
      GroupDescription: !Sub 'This group will allow HTTP access to the Elastic Load Balancer from ${SourceCidr}'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants inbound HTTP access from external sources
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SourceCidr
      SecurityGroupEgress:
        - Description: Grants HTTP outbound only
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ELB-ApacheHttpd'

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Enabling direct internet access through VPC NatGateway inside of using inspection vpc for demo purposes only
          - id: W40
            reason: Enabling direct internet access through VPC NatGateway inside of using inspection vpc for demo purposes only
    Properties:
      GroupDescription: This group will allow HTTP access to the EC2 Instances from the Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants inbound HTTP access from ELB
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - Description: Grants outbound to all
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-LinuxASG-ApacheHttpd'

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - S3BucketPolicy
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref S3Bucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Ref PublicSubnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-ApacheHttpd'
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2

  ELBListener:
    #checkov:skip=CKV_AWS_2:Using HTTP instead of HTTPS for demo purposes
    #checkov:skip=CKV_AWS_103:TLS v1.2 is not needed since we are using HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W56
            reason: Using HTTP instead of HTTPS for demo purposes
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LinuxASG-ApacheHttpd'
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        MetadataOptions:
          HttpTokens: required
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          service httpd start
          chkconfig httpd on
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 180
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      DesiredCapacity: !Ref AsgDesired
      MinSize: !Ref AsgMin
      MaxSize: !Ref AsgMax
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: !Ref PrivateSubnets
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-LinuxASG-ApacheHttpd'
          PropagateAtLaunch: true

  AutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80

Outputs:
  LinuxSiteUrl:
    Value: !GetAtt ElasticLoadBalancer.DNSName
    Description: Public facing url of our sample website
