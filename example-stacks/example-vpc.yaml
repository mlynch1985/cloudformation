AWSTemplateFormatVersion: '2010-09-09'

Description: This template will create a 10.0.0.0/16 VPC with 3 Public and 3 Private /24 Subnets

Parameters:
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: Specify the VPC cidr (max=/16 min=/21)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/([1][6-9]|[2][0-1])"
    ConstraintDescription: Must be a valid IP cidr range between /16 and /21 and in the 0.0.0.0/0 format

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Public'

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Public-A'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Public-B'

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Public-C'

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicSubnetRouteTable

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Private-A'

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Private-B'

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Private-C'

  NAT1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-NGWEIP-A'

  NAT2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-NGWEIP-B'

  NAT3EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-NGWEIP-C'

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT1EIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-NGW-A'

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT2EIP.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-NGW-B'

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NAT3EIP.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-NGW-C'

  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Private-A'

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Private-B'

  PrivateSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-Private-C'

  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnetCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateSubnetCRouteTable

Outputs:
  VPCID:
    Value: !Ref VPC
    Description: VPC ID
    Export:
      Name: VPCID
  VPCCidr:
    Value: !GetAtt VPC.CidrBlock
    Description: VPC CIDR
    Export:
      Name: VPCCidr
  DefaultSecurityGroup:
    Value: !GetAtt VPC.DefaultSecurityGroup
    Description: The default security group
    Export:
      Name: DefaultSecurityGroup
  PublicSubnetA:
    Value: !Ref PublicSubnetA
    Description: Public /24 subnet in AZ A
    Export:
      Name: PublicSubnetA
  PublicSubnetB:
    Value: !Ref PublicSubnetB
    Description: Public /24 subnet in AZ B
    Export:
      Name: PublicSubnetB
  PublicSubnetC:
    Value: !Ref PublicSubnetC
    Description: Public /24 subnet in AZ C
    Export:
      Name: PublicSubnetC
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
    Description: Private /24 subnet in AZ A
    Export:
      Name: PrivateSubnetA
  PrivateSubnetB:
    Value: !Ref PrivateSubnetB
    Description: Private /24 subnet in AZ B
    Export:
      Name: PrivateSubnetB
  PrivateSubnetC:
    Value: !Ref PrivateSubnetC
    Description: Private /24 subnet in AZ C
    Export:
      Name: PrivateSubnetC
  PublicSubnetRouteTable:
    Value: !Ref PublicSubnetRouteTable
    Description: Public access route table
    Export:
      Name: PublicSubnetRouteTable
  PrivateSubnetARouteTable:
    Value: !Ref PrivateSubnetARouteTable
    Description: Private route table in AZ A
    Export:
      Name: PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Value: !Ref PrivateSubnetBRouteTable
    Description: Private route table in AZ B
    Export:
      Name: PrivateSubnetBRouteTable
  PrivateSubnetCRouteTable:
    Value: !Ref PrivateSubnetCRouteTable
    Description: Private route table in AZ C
    Export:
      Name: PrivateSubnetCRouteTable
