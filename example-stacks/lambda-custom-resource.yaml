AWSTemplateFormatVersion: '2010-09-09'

Description: Uses a Cloudformation custom resource Lambda function to deploy unsupported resources while maintaining the full management lifecycle

Parameters:
  SecurityGroupName:
    Type: String
    Description: Specify a name for the security group

  VpcId:
    Type: String
    Description: Specify the VPC ID for the security group

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Grants Lambda access to Cloudwatch Logs and to create unsupported resources
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'lambda.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess'

  SecurityGroup:
    Type: Custom::SecurityGroup
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn

  LambdaFunction:
    #checkov:skip=CKV_AWS_116:Opting to not setup a Dead Letter Queue for demo purposes
    #checkov:skip=CKV_AWS_117:There is need for VPC connectivity
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: IAM Role contains basic permissions to publish logs to CloudWatch
          - id: W89
            reason: This Lambda function should not be provisioned within a VPC
    Properties:
      Architectures: [arm64]
      Description: Creates Security Group
      Handler: index.lambda_handler
      ReservedConcurrentExecutions: 1
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse

          client = boto3.client('ec2')

          def lambda_handler(event, context):
            if event['RequestType'] == 'Create':
              try:
                print('Received create event')
                print(str(event))

                response = client.create_security_group(
                  Description='Test Security Group',
                  GroupName='${SecurityGroupName}',
                  VpcId='${VpcId}',
                  TagSpecifications=[
                    {
                      'ResourceType': 'security-group',
                      'Tags': [
                        {
                          'Key': 'Name',
                          'Value': '${SecurityGroupName}'
                        }
                      ]
                    }
                  ]
                )

                print(response)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              except Exception as inst:
                print(inst)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})

            elif event['RequestType'] == 'Delete':
              try:
                print('Received delete event')
                print(str(event))

                groupIDs = client.describe_security_groups(
                  Filters=[
                    {
                      'Name': 'tag:Name',
                      'Values': ['${SecurityGroupName}']
                    }
                  ]
                )

                print(groupIDs)
                groupID = groupIDs['SecurityGroups'][0]['GroupId']
                print(groupID)

                response = client.delete_security_group(
                  GroupId=groupID
                )

                print(response)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              except Exception as inst:
                print(inst)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
