AWSTemplateFormatVersion: '2010-09-09'

Description: Uses a Cloudformation custom resource Lambda function to deploy unsupported resources while maintaining the full management lifecycle

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC ID where we should deploy this stack
  SecurityGroupName:
    Type: String
    Description: Specify a name for the security group
  ResourceName:
    Type: String
    Description: Specify an alphanumeric name including hypens for this Custom Resource
    Default: custom-resource
    AllowedPattern: ([a-zA-Z0-9-]{1,32})

Resources:
    #checkov:skip=CKV_AWS_111:We need to enable * for all EC2 instances since the instance IDs are randomly generated
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: ec2:DescribeSecurityGroup requires * resource
    Properties:
      Description: Grants Lambda access to Cloudwatch Logs and to create unsupported resources
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'lambda.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: GrantCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-${ResourceName}*'
        - PolicyName: GrantEC2SecurityGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:CreateTags'
                Resource: '*'

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: This key will encrypt data stored in CloudWatch Logs
      EnableKeyRotation: true
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM Policies
            Effect: 'Allow'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
          - Sid: Enable CloudWatch Logs
            Effect: 'Allow'
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'
            Principal:
              Service: !Sub 'logs.${AWS::Region}.${AWS::URLSuffix}'
            Condition:
              ArnEquals:
                kms:EncryptionContext:aws:logs:arn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-${ResourceName}'

  LogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      KmsKeyId: !GetAtt KmsKey.Arn
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${ResourceName}'
      RetentionInDays: 30

  SecurityGroup:
    Type: Custom::SecurityGroup
    DependsOn:
      - KmsKey
      - LogGroup
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn

  LambdaFunction:
    #checkov:skip=CKV_AWS_116:Opting to not setup a Dead Letter Queue for demo purposes
    #checkov:skip=CKV_AWS_117:There is need for VPC connectivity
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: IAM Role contains basic permissions to publish logs to CloudWatch
          - id: W89
            reason: This Lambda function should not be provisioned within a VPC
    DependsOn:
      - KmsKey
      - LogGroup
    Properties:
      Architectures: [arm64]
      Description: Custom Resource Lambda function
      FunctionName: !Sub '${AWS::StackName}-${ResourceName}'
      Handler: index.lambda_handler
      ReservedConcurrentExecutions: 1
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse

          client = boto3.client('ec2')

          def lambda_handler(event, context):
            if event['RequestType'] == 'Create':
              try:
                print('Received create event')
                print(str(event))

                response = client.create_security_group(
                  Description='Test Security Group',
                  GroupName='${SecurityGroupName}',
                  VpcId='${VpcId}',
                  TagSpecifications=[
                    {
                      'ResourceType': 'security-group',
                      'Tags': [
                        {
                          'Key': 'Name',
                          'Value': '${SecurityGroupName}'
                        }
                      ]
                    }
                  ]
                )

                print(response)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              except Exception as inst:
                print(inst)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})

            elif event['RequestType'] == 'Delete':
              try:
                print('Received delete event')
                print(str(event))

                groupIDs = client.describe_security_groups(
                  Filters=[
                    {
                      'Name': 'tag:Name',
                      'Values': ['${SecurityGroupName}']
                    }
                  ]
                )

                print(groupIDs)
                groupID = groupIDs['SecurityGroups'][0]['GroupId']
                print(groupID)

                response = client.delete_security_group(
                  GroupId=groupID
                )

                print(response)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              except Exception as inst:
                print(inst)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
