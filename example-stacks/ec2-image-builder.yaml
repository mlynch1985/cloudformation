AWSTemplateFormatVersion: '2010-09-09'

Description: This template will deploy a sample EC2 ImageBuilder pipeline and dedicated vpc that will generate an AmazonLinux2 AMI.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - SecurityGroups
          - Subnet

Parameters:
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Select the Security Groups to attach to the ubild and test instances
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet to launch the build and test instances into

Resources:
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This role will grant EC2 ImageBuilder the minimum neccessary permissions to allow pipelines to execute
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'ec2.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-ec2-imagebuilder'
      Roles:
        - !Ref IamRole

  Component:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub '${AWS::StackName}-HelloWorld-Component'
      Platform: Linux
      Version: 1.0.0
      Description: 'This component will echo Hello World out to the console'
      ChangeDescription: 'Initial Version'
      Data: |
        name: HelloWorld
        description: This component will echo Hello World out to the console
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: step1
                action: ExecuteBash
                inputs:
                  commands:
                    - echo 'Hello World'

  Recipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub '${AWS::StackName}-HelloWorld-Recipe'
      Description: This recipe will create an AMI based on AmazonLinux2 AMI and set the root drive to 50GB
      Version: 1.0.0
      ParentImage: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/amazon-linux-2-x86/x.x.x'
      Components:
        - ComponentArn: !Ref Component
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: True
            VolumeSize: 50
            VolumeType: gp3
            Encrypted: True

  Infrastructure:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub '${AWS::StackName}-HelloWorld-Infrastructure'
      InstanceProfileName: !Ref InstanceProfile
      SecurityGroupIds: !Ref SecurityGroups
      SubnetId: !Ref Subnet
      TerminateInstanceOnFailure: True

  Distribution:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub '${AWS::StackName}-HelloWorld-Distribution'
      Distributions:
        - Region: !Ref AWS::Region
          AmiDistributionConfiguration:
            Name: !Sub '${AWS::StackName}-HelloWorld-{{ imagebuilder:buildDate }}'
            AmiTags:
              Name: !Sub '${AWS::StackName}-HelloWorld'

  Pipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: !Sub '${AWS::StackName}-HelloWorld-Pipeline'
      Description: Deploys a sample AmazonLinux2 Ami to current region
      Status: ENABLED
      ImageRecipeArn: !Ref Recipe
      InfrastructureConfigurationArn: !Ref Infrastructure
      DistributionConfigurationArn: !Ref Distribution
      ImageTestsConfiguration:
        ImageTestsEnabled: false
        TimeoutMinutes: 60
