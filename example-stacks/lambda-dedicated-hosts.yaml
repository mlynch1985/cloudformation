AWSTemplateFormatVersion: '2010-09-09'

Description: Deploys EC2 Dedicated Hosts with custom options and allows for the instance family to be specified.

Parameters:
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Specify the availability zone to deploy dedicated host into
  InstanceFamily:
    Type: String
    Description: 'Provide a valid dedicated host instance family. Reference: https://aws.amazon.com/ec2/dedicated-hosts/pricing/#host-configuration'
    Default: m5
    AllowedValues:
      - t3
      - m5
      - c5
      - r5
  InstanceCount:
    Type: Number
    Description: Specify how many dedicated hosts you want to launch.
    MinValue: 1
    MaxValue: 10
    Default: 1
  AutoPlacement:
    Type: String
    Description: Set to on to allow instances to be launched without a specific host id.
    AllowedValues: ['on', 'off']
    Default: 'off'
  HostRecovery:
    Type: String
    Description: Set to on to enable automatic host recovery.
    AllowedValues: ['on', 'off']
    Default: 'off'

Resources:
  LambdaExecutionRole:
    #checkov:skip=CKV_AWS_111:Allowing writes without constraints only for demo purposes
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Enabling wildcard on resource to allow for any EC2 Dedicated Host to be managed
    Properties:
      Description: Grants Lambda access to Cloudwatch Logs and to launch dedicated hosts
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'lambda.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: GrantEC2LaunchDedicatedHosts
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeHosts'
                  - 'ec2:AllocateHosts'
                  - 'ec2:ReleaseHosts'
                  - 'ec2:CreateTags'
                Resource: '*'

  CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GrantCloudWatchLogs
      Roles: [!Ref LambdaExecutionRole]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !GetAtt LogGroup.Arn

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: This key will encrypt data stored in CloudWatch Logs
      EnableKeyRotation: true
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM Policies
            Effect: 'Allow'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
          - Sid: Enable CloudWatch Logs
            Effect: 'Allow'
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'
            Principal:
              Service: !Sub 'logs.${AWS::Region}.${AWS::URLSuffix}'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      KmsKeyId: !GetAtt KmsKey.Arn
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: 30

  LambdaExecution:
    Type: Custom::LambdaFunction
    DependsOn:
      - KmsKey
      - LogGroup
      - CloudWatchLogsPolicy
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn

  LambdaFunction:
    #checkov:skip=CKV_AWS_116:Opting to not setup a Dead Letter Queue for demo purposes
    #checkov:skip=CKV_AWS_117:There is need for VPC connectivity
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: IAM Role contains basic permissions to publish logs to CloudWatch
          - id: W89
            reason: This Lambda function should not be provisioned within a VPC
    Properties:
      Architectures: [arm64]
      Description: !Sub Deploys EC2 dedicated hosts as part of the ${AWS::StackName} Cloudformation stack
      Handler: index.lambda_handler
      ReservedConcurrentExecutions: 1
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse

          client = boto3.client('ec2')

          def lambda_handler(event, context):
            if event['RequestType'] == 'Create':
              try:
                print('Received create event')
                print(str(event))

                # allocates dedicated hosts based upon provided parameters
                response = client.allocate_hosts(
                  AutoPlacement='${AutoPlacement}',
                  AvailabilityZone='${AvailabilityZone}',
                  InstanceFamily='${InstanceFamily}',
                  Quantity=${InstanceCount},
                  HostRecovery='${HostRecovery}',
                  TagSpecifications=[
                    {
                      'ResourceType': 'dedicated-host',
                      'Tags': [
                        {
                          'Key': 'Name',
                          'Value': '${AWS::StackName}'
                        },
                        {
                          'Key': '${AWS::StackName}', # mandatory key required when releasing dedicated host in below code
                          'Value': '${AWS::StackName}'
                        }
                      ]
                    }
                  ]
                )

                print(response)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}) # notify Cloudformation service that creation is complete

              except Exception as inst:
                print(inst)
                cfnresponse.send(event, context, cfnresponse.FAILED, {}) # notify Cloudformation service that creation has failed

            elif event['RequestType'] == 'Delete':
              try:
                print('Received delete event')
                print(str(event))

                hostIDs = []

                hostDict = client.describe_hosts(
                  Filters=[
                    {
                      'Name': 'state',
                      'Values': ['available']
                    },
                    {
                      'Name': 'tag-key',
                      'Values': ['${AWS::StackName}']
                    }
                  ]
                )

                for host in hostDict['Hosts']:
                  hostIDs.append(host['HostId'])
                  response = client.release_hosts(HostIds=hostIDs)

                  print(response)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              except Exception as inst:
                print(inst)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})

            else:
              print('default response')
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
