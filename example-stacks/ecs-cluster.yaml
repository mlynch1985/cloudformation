AWSTemplateFormatVersion: '2010-09-09'

Description: This template will deploy a sample ECS Cluster hosting a PHP site across two availability zones.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - PublicSubnets
          - PrivateSubnets
          - SourceCidr
      - Label:
          default: Linux ASG Configuration
        Parameters:
          - CpuAmount
          - MemoryAmount

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC ID where we should deploy this stack
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the Public facing Subnets for the ELB
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the Private facing Subnets for the ECS Cluster
  SourceCidr:
    Type: String
    Description: Provide a CIDR to allow source traffic to the ELB
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: 172.31.0.0/16
  CpuAmount:
    Type: Number
    Description: Specify the number of CPU Units to assign to the ECS Task
    Default: 256
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
  MemoryAmount:
    Type: Number
    Description: Specify the number of Memory Units to assign to the ECS Task
    Default: 512
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 4096
      - 8192
      - 10240
      - 16384

Mappings:
  RegionMap:
    us-east-1:
      ElbAccountId: 127311923021
    us-east-2:
      ElbAccountId: 033677994240
    us-west-1:
      ElbAccountId: 027434742980
    us-west-2:
      ElbAccountId: 797873946194
    af-south-1:
      ElbAccountId: 098369216593
    ca-central-1:
      ElbAccountId: 985666609251
    eu-central-1:
      ElbAccountId: 054676820928
    eu-west-1:
      ElbAccountId: 156460612806
    eu-west-2:
      ElbAccountId: 652711504416
    eu-south-1:
      ElbAccountId: 635631232127
    eu-west-3:
      ElbAccountId: 009996457667
    eu-north-1:
      ElbAccountId: 897822967062
    ap-east-1:
      ElbAccountId: 754344448648
    ap-northeast-1:
      ElbAccountId: 582318560864
    ap-northeast-2:
      ElbAccountId: 600734575887
    ap-northeast-3:
      ElbAccountId: 383597477331
    ap-southeast-1:
      ElbAccountId: 114774131450
    ap-southeast-2:
      ElbAccountId: 783225319266
    ap-southeast-3:
      ElbAccountId: 589379963580
    ap-south-1:
      ElbAccountId: 718504428378
    me-south-1:
      ElbAccountId: 076674570225
    sa-east-1:
      ElbAccountId: 507241528517

Resources:
  IamRole:
    #checkov:skip=CKV_AWS_111:Allowing writes without constraints only for demo purposes
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Enabling wildcard on resources for demo purposes
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'ecs-tasks.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole

  # ECRIamRolePolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: GrantECRAccess
  #     Roles:
  #       - !Ref IamRole
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - 'ecr:GetAuthorizationToken'
  #             - 'ecr:BatchCheckLayerAvailability'
  #             - 'ecr:GetDownloadUrlForLayer'
  #             - 'ecr:BatchGetImage'
  #           Resource: '*'

  CloudWatchIamRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GrantCloudWatchLogsAccess
      Roles:
        - !Ref IamRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !GetAtt LogGroup.Arn
              - !Sub '${LogGroup.Arn}*'

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: This key will encrypt data stored in CloudWatch Logs
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM Policies
            Effect: 'Allow'
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:TagResource"
              - "kms:UntagResource"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: '*'
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
          - Sid: Enable CloudWatch Logs
            Effect: 'Allow'
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'
            Principal:
              Service: !Sub 'logs.${AWS::Region}.${AWS::URLSuffix}'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  S3Bucket:
    #checkov:skip=CKV_AWS_18:Opting to disable Access Logging for demo purposes
    #checkov:skip=CKV_AWS_21:Versioning is not required for a logging bucket
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: We are opting to not activate access logging for demo purposes
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256 # aws:kms is not currently support as of 2022.07.01
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOlderThan30Days
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AccessLogs'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: GrantPutObject
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub '${S3Bucket.Arn}/*'
            Principal:
              AWS: !Sub
                - 'arn:${AWS::Partition}:iam::${CurrentELBAccountId}:root'
                - CurrentELBAccountId: !FindInMap [RegionMap, !Ref 'AWS::Region', ElbAccountId]
          - Sid: GrantGetBucketAcl
            Effect: Allow
            Action:
              - s3:GetBucketAcl
            Resource:
              - !GetAtt S3Bucket.Arn
            Principal:
              Service: !Sub 'logdelivery.elb.${AWS::URLSuffix}'
            Condition:
              ArnLike:
                aws:SourceAccount: !Ref AWS::AccountId

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Enabling direct internet access through VPC NatGateway inside of using inspection vpc for demo purposes only
          - id: W40
            reason: Enabling direct internet access through VPC NatGateway inside of using inspection vpc for demo purposes only
    Properties:
      GroupDescription: This group will allow HTTP access to the ECS LoadBalancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants inbound HTTP access from external sources
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SourceCidr
      SecurityGroupEgress:
        - Description: Grants HTTP outbound only
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-elb'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Enabling direct internet access through VPC NatGateway inside of using inspection vpc for demo purposes only
          - id: W40
            reason: Enabling direct internet access through VPC NatGateway inside of using inspection vpc for demo purposes only
    Properties:
      GroupDescription: This group will allow HTTP access to the ECS Instances from the Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Grants inbound HTTP access from ELB
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - Description: Grants outbound to all
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ecs-cluster'

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - S3BucketPolicy
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref S3Bucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Ref PublicSubnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-ecs-cluster'
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2

  ELBListener:
    #checkov:skip=CKV_AWS_2:Using HTTP instead of HTTPS for demo purposes
    #checkov:skip=CKV_AWS_103:TLS v1.2 is not needed since we are using HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W56
            reason: Using HTTP instead of HTTPS for demo purposes
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      KmsKeyId: !GetAtt KmsKey.Arn
      LogGroupName: !Sub '${AWS::StackName}-ecs-cluster'
      RetentionInDays: 30

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-ecs-cluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref CpuAmount
      Memory: !Ref MemoryAmount
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt IamRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-ecs-cluster'
          Image: amazon/amazon-ecs-sample
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: 'ecs-sample'

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ElasticLoadBalancer
      - ELBListener
    Properties:
      TaskDefinition: !Ref ECSTask
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-ecs-cluster'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

Outputs:
  DemoSiteUrl:
    Value: !GetAtt ElasticLoadBalancer.DNSName
    Description: Public facing url of our sample website
    Export:
      Name: DemoSiteUrl
