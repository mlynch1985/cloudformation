AWSTemplateFormatVersion: '2010-09-09'

Description: This template will deploy a sample ECS Cluster hosting a PHP site across two availability zones.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - PublicSubnets
          - PrivateSubnets
          - ElbCidr
      - Label:
          default: Linux ASG Configuration
        Parameters:
          - CpuAmount
          - MemoryAmount

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC ID where we should deploy this stack
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the Public facing Subnets for the ELB
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the Private facing Subnets for the ECS Cluster
  ElbCidr:
    Type: String
    Description: Provide a CIDR to allow source traffic to the ELB
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: 172.31.0.0/16
  CpuAmount:
    Type: Number
    Description: Specify the number of CPU Units to assign to the ECS Task
    Default: 256
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
  MemoryAmount:
    Type: Number
    Description: Specify the number of Memory Units to assign to the ECS Task
    Default: 512
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 4096
      - 8192
      - 10240
      - 16384

Resources:
  IamExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ecs-cluster'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This group will allow HTTP access to the ECS LoadBalancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ElbCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-elb'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This group will allow HTTP access to the ECS Instances from the Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ecs-cluster'

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-ecs-cluster'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Ref PublicSubnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-ecs-cluster'
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-ecs-cluster'
      RetentionInDays: 30

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-ecs-cluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref CpuAmount
      Memory: !Ref MemoryAmount
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt IamExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-ecs-cluster'
          Image: amazon/amazon-ecs-sample
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-stream-prefix: 'ecs-sample'

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ElasticLoadBalancer
      - ELBListener
    Properties:
      TaskDefinition: !Ref ECSTask
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-ecs-cluster'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

Outputs:
  DemoSiteUrl:
    Value: !GetAtt ElasticLoadBalancer.DNSName
    Description: Public facing url of our sample website
    Export:
      Name: DemoSiteUrl
