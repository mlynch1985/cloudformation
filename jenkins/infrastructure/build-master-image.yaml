AWSTemplateFormatVersion: '2010-09-09'

Description: This stack deploys a CodeBuild project that generates a Jenkins Master Docker image and publishes it to an ECR Repository

Resources:
  IamRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Wildcard Resource enabled with Condition policy
    Properties:
      Description: This role grants AWS CodeBuild access to the ECR Repo
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'codebuild.${AWS::URLSuffix}'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: GrantGetAuthorizationToken
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
        - PolicyName: GrantECRAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                Resource:
                  - !GetAtt ECR.Arn
                  - !Sub '${ECR.Arn}*'
        - PolicyName: GrantCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub '${LogGroup.Arn}*'

  CloudWatchLogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypts data stored within a CloudWatch Log Group
      EnableKeyRotation: true
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM Policies
            Effect: 'Allow'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
          - Sid: Enable CloudWatch Logs
            Effect: 'Allow'
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'
            Principal:
              Service: !Sub 'logs.${AWS::Region}.${AWS::URLSuffix}'
            Condition:
              ArnEquals:
                kms:EncryptionContext:aws:logs:arn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}'

  LogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      KmsKeyId: !GetAtt CloudWatchLogsKmsKey.Arn
      LogGroupName: !Sub '/aws/codebuild/${AWS::StackName}'
      RetentionInDays: 30

  EcrKmsKey:
    Type: AWS::KMS::Key
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Wildcard Principal enabled with Conditions policy
    Properties:
      Description: This key will encrypt images stored in ECR
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM Policies
            Effect: 'Allow'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
          - Sid: Enable CodeBuild Access
            Effect: 'Allow'
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'
            Principal:
              Service:
                - !Sub 'codebuild.${AWS::URLSuffix}'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
          - Sid: Enable ECR Access
            Effect: 'Allow'
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'
            Principal: '*'
            Condition:
              StringEquals:
                aws:ViaService: !Sub 'ecr.${AWS::Region}.${AWS::URLSuffix}'
                kms:CallerAccount: !Ref AWS::AccountId

  ECR:
    Type: AWS::ECR::Repository
    Properties:
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !GetAtt EcrKmsKey.Arn
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        RegistryId: !Ref AWS::AccountId
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "expire more than 5 images",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCodeBuild
            Effect: Allow
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
            Principal: '*'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'Build-Jenkins-Master-${AWS::StackName}-${AWS::Region}'
      Artifacts:
        Type: NO_ARTIFACTS
      EncryptionKey: !GetAtt EcrKmsKey.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: IMAGE_TAG
            Type: PLAINTEXT
            Value: latest
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Ref ECR
        Image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
        PrivilegedMode: true
        Type: ARM_CONTAINER
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogGroup
          Status: ENABLED
      ServiceRole: !Ref IamRole
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2

          phases:
            build:
              commands:
                - echo Build started on `date`

                - echo creating Dockerfile
                - echo "FROM jenkins/jenkins:latest" > Dockerfile
                - echo "USER root" >> Dockerfile
                - echo "RUN apt-get update -y" >> Dockerfile
                - echo "USER jenkins" >> Dockerfile
                - cat Dockerfile

                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

                - echo Building the Jenkins Master Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
